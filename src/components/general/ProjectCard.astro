---
import Image from "astro/components/Image.astro";
import GitHubIcon from "../../assets/Icons/GitHubIcon.astro";
import LinkIcon from "../../assets/Icons/LinkIcon.astro";
import AngularIcon from "../../assets/Icons/AngularIcon.astro";
import SpringBootIcon from "../../assets/Icons/SpringBootIcon.astro";
import AstroIcon from "../../assets/Icons/AstroIcon.astro";
import TailwindIcon from "../../assets/Icons/TailwindIcon.astro";
import BootstrapIcon from "../../assets/Icons/BootstrapIcon.astro";
import DockerIcon from "../../assets/Icons/DockerIcon.astro"

// Mapeo de nombres de iconos a componentes
const iconComponents = {
  AngularIcon,
  SpringBootIcon,
  AstroIcon,
  TailwindIcon,
  BootstrapIcon,
  DockerIcon
};

// Define la interfaz de Props
interface Props {
  image: ImageMetadata;
  title: string;
  description: string;
  demoLink?: string;
  githubLink?: string;
  tags: Array<{
    name: string;
    icon: string; 
  }>;
}


const { image, title, description, demoLink, githubLink, tags } = Astro.props;
---

<div class="max-w-md bg-white border border-gray-200 rounded-lg shadow-md dark:bg-gray-800 dark:border-gray-700 hover:shadow-xl transition-all duration-300 group">
  <div class="overflow-hidden rounded-t-lg h-48 relative">
    <img class="w-full h-full object-cover object-center group-hover:scale-105 transition-transform duration-500" src={image.src} alt={title} />
    <div class="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  </div>
  
  <div class="p-5 m-1  relative">
    <div class="flex justify-between items-start">
      <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors duration-300">
        {title}
      </h5>
      
      <div class="flex gap-2">
        {githubLink && (
          <a
            href={githubLink}
            target="_blank"
            rel="noopener noreferrer"
            class="bg-indigo-100 hover:bg-indigo-200 text-indigo-800 text-xs font-semibold p-2 rounded-full dark:bg-gray-700 dark:text-indigo-400 border border-indigo-200 dark:border-indigo-700 inline-flex items-center justify-center w-9 h-9 hover:scale-110 shadow-sm hover:shadow-md transition-all duration-200"
            aria-label="Ver repositorio en GitHub"
          >
            <GitHubIcon class:list={"size-5"} />
          </a>
        )}
        
        {demoLink && (
          <a
            href={demoLink}
            target="_blank"
            rel="noopener noreferrer"
            class="bg-sky-100 hover:bg-sky-200 text-sky-800 text-xs font-semibold p-2 rounded-full dark:bg-gray-700 dark:text-sky-400 border border-sky-200 dark:border-sky-700 inline-flex items-center justify-center w-9 h-9 hover:scale-110 shadow-sm hover:shadow-md transition-all duration-200"
            aria-label="Ver demo"
          >
            <LinkIcon class:list={"size-5"} />
          </a>
        )}
      </div>
    </div>
    
    <p class="mb-3 text-sm font-normal text-gray-700 dark:text-gray-400">
      {description}
    </p>
    
    {tags && tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mt-4 mb-1 ">
        {tags.map(tag => {
          const IconComponent = iconComponents[tag.icon];
          return (
            <span class="flex items-center gap-1 bg-gradient-to-r from-indigo-50 to-indigo-100 text-xs font-medium px-2 py-0.5 rounded-full dark:from-indigo-900 dark:to-indigo-800 dark:text-indigo-200 border border-indigo-200 dark:border-indigo-700 shadow-sm">
              {IconComponent && <IconComponent class="size-4" />}
              <span>{tag.name}</span>
            </span>
          );
        })}
      </div>
    )}
    
  </div>
</div>
